import numpy as np
from collections import defaultdict
from DataLoader import DataLoader
import DatasetUtils
import time


class TripleManager:
    def __init__(self, main_loader, *secondary_loaders):
        """
        Initializes the TripleManager with a main data loader and optional secondary loaders.

        :param main_loader: The primary DataLoader instance
        :param secondary_loaders: Optional secondary DataLoader instances
        """
        self.main_loader = main_loader
        self.secondary_loaders = secondary_loaders

        # Aggregating structures across all loaders
        self.head_dict = defaultdict(lambda: defaultdict(set))
        self.tail_dict = defaultdict(lambda: defaultdict(set))
        self.domain = defaultdict(set)
        self.range = defaultdict(set)
        self.entities = main_loader.entities  # The entity set remains the same across loaders

        # Unioning all structures
        self._aggregate_structures()

    def _aggregate_structures(self):
        """Precomputes the union of domains and relations from all provided loaders."""
        for loader in (self.main_loader, *self.secondary_loaders):
            for r in loader.head_dict:
                for t, heads in loader.head_dict[r].items():
                    self.head_dict[r][t].update(heads)

            for r in loader.tail_dict:
                for h, tails in loader.tail_dict[r].items():
                    self.tail_dict[r][h].update(tails)

            for r, dom_entities in loader.domain.items():
                self.domain[r].update(dom_entities)

            for r, range_entities in loader.range.items():
                self.range[r].update(range_entities)

    def get_triples(self):
        """Returns all triples in the main data loader."""
        return self.main_loader.get_triples()

    def get_corrupted(self, h, r, t, corruption_type='tail'):
        """
        Corrupts a given triple by replacing either the head or the tail.

        :param h: Head entity
        :param r: Relation
        :param t: Tail entity
        :param corruption_type: Either 'head' or 'tail'
        :return: A set of corrupted entities
        """
        if corruption_type == 'tail':
            return self.entities - self.tail_dict[r][h]
        elif corruption_type == 'head':
            return self.entities - self.head_dict[r][t]
        else:
            raise ValueError("corruption_type must be either 'head' or 'tail'")


def end_time(start_time):
    # Print the total execution time of the entire code
    total_time = time.time() - start_time
    time_taken = (f"\tTime Taken: "
                  f"{total_time // 3600} Hours, "
                  f"{(total_time % 3600) // 60} Minutes, "
                  f"and {(total_time % 3600) % 60} seconds.")
    print(time_taken)


# test case
def test_triple_manager(dataset):

    dataset_name = DatasetUtils.get_dataset_name(dataset)

    print(f"Testing {dataset}.{dataset_name}")

    folder = "D:\\Masters\\RIT\\Semesters\\Sem 4\\RA\\Augmented KGE\\"

    path = folder + "Datasets/" + dataset_name + "/"

    train_loader = DataLoader(path, "train")
    val_loader = DataLoader(path, "valid")
    test_loader = DataLoader(path, "test")

    train_manager = TripleManager(train_loader)
    valid_manager = TripleManager(val_loader, train_loader)
    test_manager = TripleManager(test_loader, val_loader, train_loader)

    for manager in [train_manager, valid_manager, test_manager]:
        print(f"\tTesting TripleManager with", len(manager.get_triples()), "triples")
        for triple in manager.get_triples():
            h, r, t = triple
            corrupted_heads = manager.get_corrupted(h, r, t, 'head')
            corrupted_tails = manager.get_corrupted(h, r, t, 'tail')
            # print(f"Original: ({h}, {r}, {t})")
            # print(f"Corrupted Heads: {list(corrupted_heads)[:5]}")
            # print(f"Corrupted Tails: {list(corrupted_tails)[:5]}")


def test_all_datasets():

    test_datasets = [i for i in range(12)]

    # test_datasets = [11]

    for dataset in test_datasets:
        start_time = time.time()

        test_triple_manager(dataset)

        end_time(start_time)


def main():

    test_all_datasets()

if __name__ == "__main__":
    main()
